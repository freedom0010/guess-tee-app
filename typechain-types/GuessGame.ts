/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface GuessGameInterface extends Interface {
  getFunction(
    nameOrSignature: "getBalance" | "guess" | "guessFee" | "owner"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "GuessResult"): EventFragment;

  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "guess", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "guessFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guessFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
}

export namespace GuessResultEvent {
  export type InputTuple = [
    player: AddressLike,
    guess: BigNumberish,
    result: string
  ];
  export type OutputTuple = [player: string, guess: bigint, result: string];
  export interface OutputObject {
    player: string;
    guess: bigint;
    result: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GuessGame extends BaseContract {
  connect(runner?: ContractRunner | null): GuessGame;
  waitForDeployment(): Promise<this>;

  interface: GuessGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  guess: TypedContractMethod<[_guess: BigNumberish], [void], "payable">;

  guessFee: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "guess"
  ): TypedContractMethod<[_guess: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "guessFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "GuessResult"
  ): TypedContractEvent<
    GuessResultEvent.InputTuple,
    GuessResultEvent.OutputTuple,
    GuessResultEvent.OutputObject
  >;

  filters: {
    "GuessResult(address,uint256,string)": TypedContractEvent<
      GuessResultEvent.InputTuple,
      GuessResultEvent.OutputTuple,
      GuessResultEvent.OutputObject
    >;
    GuessResult: TypedContractEvent<
      GuessResultEvent.InputTuple,
      GuessResultEvent.OutputTuple,
      GuessResultEvent.OutputObject
    >;
  };
}
